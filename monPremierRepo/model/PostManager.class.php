<?php
/**
 * 
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 */

class PostManager {

	/**
	 * 
	 * @var string
	 * @access private
	 */

	private $_db;

	/**
	 * @access public
	 * @param PDO $db
	 * @return void
	 */

	public function __construct($db)
  	{
    	$this->setDb($db);
  	}

	/**
	 * @access public
	 * @param objet $post
	 * @return void
	 */

	public function addPost(Post $post)
	{
		$db = $this->dbConnect();
		$q = $db->prepare('INSERT INTO posts(image, title, text, date, tag, status) VALUES(:image, :title, :text, :date, :tag, :status)');

		$q->bindValue(':image', $post->image());
		$q->bindValue(':title', $post->title());
		$q->bindValue(':text', $post->text());
		$q->bindValue(':date', $post->date());
		$q->bindValue(':tag', $post->tag());
		$q->bindValue(':status', $post->status(), PDO::PARAM_INT);

		$q->execute();
	}

	/**
	 * @access public
	 * @return array
	 */

	public final  function getPosts() {
		$listPosts = [];

		$db = $this->dbConnect();
		$q = $db->query('SELECT id, image, title, text, date, tag, status FROM posts WHERE status = 2 ORDER BY date ASC');

		while ($data = $q->fetch(PDO::FETCH_ASSOC))
		{
			$listPosts[] = new Post($data);
		}

		return $listPosts;
	}

	/**
	 * @access public
	 * @return array
	 */

	public final  function getLastPosts($nbPosts) {
		$lastPosts = [];
		$nbPosts = $nbPosts - 3;

		$db = $this->dbConnect();
		$q = $db->query('SELECT id, image, title, text, date, tag, status FROM posts WHERE status = 2 ORDER BY date DESC LIMIT 3');

		while ($data = $q->fetch(PDO::FETCH_ASSOC))
		{
			$lastPosts[] = new Post($data);
		}

		return $lastPosts;
	}


	/**
	 * @access public
	 * @param int $postId 
	 * @return objet
	 */

	public final  function getPost($postId) {

		$postId = (int) $postId;

		if(!is_int($postId))
		{
			trigger_error('the $postId should be a int type', E_USER_WARNING);
		  	return;
		}
		else {
			$db = $this->dbConnect();
			$q = $db->query('SELECT id, image, title, text, date, tag, status FROM posts WHERE id = '.$postId);

			$data = $q->fetch(PDO::FETCH_ASSOC);

			return new Post($data);
		}
	}

	/**
	 * @access public
	 * @param int $postTag
	 * @return objet
	 */

	public final  function getPostByTag($postTag) {

		$postTag = (int) $postTag;

		if(!is_int($postTag))
		{
			trigger_error('the $postTag should be a int type', E_USER_WARNING);
		  	return;
		}
		else {
			$db = $this->dbConnect();
			$q = $db->query('SELECT id, image, title, text, date, tag, status FROM posts WHERE tag = '.$postTag);

			$data = $q->fetch(PDO::FETCH_ASSOC);

			return new Post($data);
		}
	}

	/**
	 * @access public
	 * @param
	 * @return array
	 */

	public final  function listTags() {
		$listTags = [];

		$db = $this->dbConnect();
		$q = $db->query('SELECT tag FROM posts');

		while ($data = $q->fetch(PDO::FETCH_NUM))
		{
			$listTags[] = $data;
		}

		return $listTags;
	}


	/**
	 * @access public
	 * @param int $postId 
	 * @return objet
	 */

	public final  function updatePost(Post $post) {

		$db = $this->dbConnect();
		$q = $db->prepare('UPDATE posts SET image = :image, title = :title, text = :text; date = :date, tag = :tag, status = :status WHERE id = :id');

		$q->bindValue(':id', $post->id(), PDO::PARAM_INT);
		$q->bindValue(':image', $post->image());
		$q->bindValue(':title', $post->title());
		$q->bindValue(':text', $post->text());
		$q->bindValue(':date', $post->date());
		$q->bindValue(':tag', $post->tag());
		$q->bindValue(':status', $post->status(), PDO::PARAM_INT);

		$q->execute();
	}


	/**
	 * @access public
	 * @param string postId
	 * @return void
	 */

	public final  function deletePost($postId) {
		$this->_db->exec('DELETE FROM posts WHERE id =\''. $postId .'\'');
	}

	/**
	 * @access public
	 * @param
	 * @return int numberPosts
	 */

	public final  function countPosts() {
		$nbPosts;

		$db = $this->dbConnect();
		$q = $db->query('SELECT COUNT(*) AS nbPosts FROM posts WHERE status = 2');

		while ($data = $q->fetch(PDO::FETCH_ASSOC))
		{
			$nbPosts = (int) $data['nbPosts'];
		}

		$nbPosts = (int)  $nbPosts;

		return $nbPosts;
	}

	/**
	 * @access public
	 * @param PDO $db
	 * @return void
	 */

	public function setDb(PDO $db)
	{
		$this->_db = $db;
	}

	/**
	 * @access public
	 * @param
	 * @return PDO $db
	 */

	public function dbConnect()
	{
		try
		{
			$db = $this->_db;
			return $db;
		}
		catch(Exception $e)
		{
			die('Erreur : '.$e->getMessage());
		}
	}

}
?>