<?php
/**
 * 
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 */

class Post {

	/**
	 * 
	 * @var int
	 * @access private
	 */
	private  $_id;

	/**
	 * 
	 * @var char
	 * @access private
	 */
	private  $_image;

	/**
	 * 
	 * @var char
	 * @access private
	 */
	private  $_title;

	/**
	 * 
	 * @var text
	 * @access private
	 */
	private  $_text;

	/**
	 * 
	 * @var date
	 * @access private
	 */
	private  $_date;

	/**
	 * 
	 * @var char
	 * @access private
	 */
	private  $_tag;

	/**
	 * 0 draft, 1 private, 2 public
	 * @var int
	 * @access private
	 */
	private  $_status;


	/**
	 * @access public
	 * @param char $thumbnail 
	 * @param char $image 
	 * @param char $title 
	 * @param text $text 
	 * @param date $date 
	 * @param char $tag 
	 * @param int $status 
	 * @return void
	 */

	 const STATUS_DRAFT = 0;
	 const STATUS_PRIVATE = 1;
	 const STATUS_PUBLIC = 2;

	public final  function __construct(array $post) {
		$this->hydrate($post);
	}


	/**
	 * @access public
	 * @param string $image 
	 * @return void
	 */

	public final  function setImage($image) {
		if (!is_string($image))
		{
		  trigger_error('the image should be a little text type', E_USER_WARNING);
		  return;
		}
		else {
			$this->_image = $image;
		}
	}


	/**
	 * @access public
	 * @param string $title 
	 * @return void
	 */

	public final  function setTitle($title) {
		if (!is_string($title))
		{
		  trigger_error('the title should be a little text type', E_USER_WARNING);
		  return;
		}
		else {
			$this->_title = $title;
		}
	}


	/**
	 * @access public
	 * @param text $text 
	 * @return void
	 */

	public final  function setText($text) {
		if (!is_string($text))
		{
		  trigger_error('the text should be a text type', E_USER_WARNING);
		  return;
		}
		else {
			$this->_text = $text;
		}
	}


	/**
	 * @access public
	 * @param date $date 
	 * @return void
	 */

	public final  function setDate($date) {
		/*<!--if (!is_date($date))
		{
		  trigger_error('the date should be a date type', E_USER_WARNING);
		  return;
		}
		else {*/
			$this->_date = $date;
		/*}*/
	}


	/**
	 * @access public
	 * @param char $tag 
	 * @return void
	 */

	public final  function setTag($tag) {
		if (!is_string($tag))
		{
		  trigger_error('the tag should be a char type', E_USER_WARNING);
		  return;
		}
		else {
			$this->_tag = $tag;
		}
	}


	/**
	 * @access public
	 * @param int $status 
	 * @return void
	 */

	public final  function setStatus($status) {

		$status = (int) $status;

		if (!is_int($status))
		{
		  trigger_error('the status should be a int type', E_USER_WARNING);
		  return;
		}
		else if (in_array($status, [self::STATUS_DRAFT, self::STATUS_PRIVATE, self::STATUS_PUBLIC] ) )
		{
			$this->_status = $status;
		}
	}


	/**
	 * @access public
	 * @return int
	 */

	public final  function id() {
		return $this->_id;
	}


	/**
	 * @access public
	 * @return char
	 */

	public final  function image() {
		return $this->_image;
	}


	/**
	 * @access public
	 * @return char
	 */

	public final  function title() {
		return $this->_title;
	}


	/**
	 * @access public
	 * @return text
	 */

	public final  function text() {
		return $this->_text;
	}


	/**
	 * @access public
	 * @return date
	 */

	public final  function date() {
		return $this->_date;
	}


	/**
	 * @access public
	 * @return char
	 */

	public final  function tag() {
		return $this->_tag;
	}


	/**
	 * @access public
	 * @return int
	 */

	public final  function status() {
		return $this->_status;
	}


	/**
	 * @access public
	 * @param array $data 
	 * @return void
	 */

	public final  function hydrate(array $post) {
		
		foreach($post as $key => $value)
		{
			$method = 'set'.ucfirst($key);

			if (method_exists($this, $method))
			{
				$this->$method($value);
			}
		}
	}


}
?>