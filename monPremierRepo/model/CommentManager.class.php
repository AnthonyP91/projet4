<?php
/**
 * 
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 */

class CommentManager {

	/**
	 * 
	 * @var string
	 * @access private
	 */

	private $_db;

	/**
	 * @access public
	 * @param PDO $db
	 * @return void
	 */

	public function __construct($db)
  	{
    	$this->setDb($db);
	}
	
	/**
	 * @access public
	 * @param objet $comment
	 * @return void
	 */

	public function addComment(Comment $comment)
	{
		$db = $this->dbConnect();
		$q = $db->prepare('INSERT INTO comments(text, author, date, status) VALUE(:text, :author, :date, :status)');

		$q->bindValue(':text', $comment->text());
		$q->bindValue(':author', $comment->author());
		$q->bindValue(':date', $comment->date());
		$q->bindValue(':date', Comment::STATUS_NORMAL);
		
		$q->execute();
	}

	/**
	 * @access public
	 * @return array
	 */

	public final  function getComments($postId) {
		$listComments = [];

		$db = $this->dbConnect();
		$q = $db->query('SELECT id, postId, text, author, date, status FROM comments WHERE postId = '.$postId);

		while ($data = $q->fetch(PDO::FETCH_ASSOC))
		{
			$listComments[] = new Comment($data);
		}

		return $listComments;
	}

	/**
	 * @access public
	 * @param objet $comment
	 * @return void
	 */

	public final  function updateComment(Comment $comment) {
		$db = $this->dbConnect();
		$q = $db->prepare('UPDATE comments SET text = :text, author = :author, date = :date, status = :status WHERE id = :id');

		$q->bindValue(':id', $comment->id(), PDO::PARAM_INT);
		$q->bindValue(':text', $comment->text());
		$q->bindValue(':author', $comment->author());
		$q->bindValue(':date', $comment->date());
		$q->bindValue(':status', $comment->status(), PDO::PARAM_INT);

		$q->execute();
	}


	/**
	 * @access public
	 * @param objet $comment
	 * @return void
	 */

	public final  function deleteComment(Comment $comment) {
		$db = $this->dbConnect();
		$db->exec('DELETE FROM comments WHERE id = '.$comment->id());
	}

	/**
	 * @access public
	 * @param objet $db
	 * @return void
	 */

	public function setDb(PDO $db)
	{
		$this->_db = $db;
	}

	/**
	 * @access public
	 * @param
	 * @return PDO $db
	 */

	public function dbConnect()
	{
		try
		{
			$db = $this->_db;
			return $db;
		}
		catch(Exception $e)
		{
			die('Erreur : '.$e->getMessage());
		}
	}


}
?>